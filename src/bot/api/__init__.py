from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from bot.keyboards import goal_update_kb, goal_set_kb, user_kb
from bot.states import AddMealStates, SetNutritionGoalStates
from dependencies import container
from usecases import UsersUseCase, DishRecognitionUseCase, RecommendationUseCase, StatisticsUseCase
from usecases.errors import UserNutritionNotSetError
from usecases.schemas import GoalType, NutritionGoalSchema

router = Router()


@router.message(F.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def add_dish(message: types.Message):
    await message.answer("–ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", reply_markup=user_kb)


@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
async def add_dish(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/(–∞—É–¥–∏–æ/—Ñ–æ—Ç–æ) –±–ª—é–¥–∞")
    await state.set_state(AddMealStates.waiting_dish_obj)


@router.message(AddMealStates.waiting_dish_obj, F.text)
async def process_dish_obj(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    uc: DishRecognitionUseCase = container.resolve(DishRecognitionUseCase)
    dish_data = await uc.recognize_dish_from_text(dish_name=message.text)
    await message.answer(
        f"üçΩ *–ë–ª—é–¥–æ:* {dish_data.name}\n"
        f"ü•© *–ë–µ–ª–∫–∏:* {dish_data.protein:.1f} –≥\n"
        f"üßà *–ñ–∏—Ä—ã:* {dish_data.fat:.1f} –≥\n"
        f"üçû *–£–≥–ª–µ–≤–æ–¥—ã:* {dish_data.carbohydrates:.1f} –≥"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏:* {dish_data.calories:.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown",
    )
    # TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    await uc.update_statistics(user_id=user_id, dish_id=dish_data.id)
    await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    await state.clear()


@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def get_daily_statistics(message: types.Message):
    user_id = message.from_user.id
    uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    counted_statistics = await uc.get_statistics(user_id=user_id)
    await message.answer(
        f"üìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**:\n"
        f"ü•© **–ë–µ–ª–∫–∏**: {counted_statistics.protein:.1f} –≥\n"
        f"üßà **–ñ–∏—Ä—ã**: {counted_statistics.fat:.1f} –≥\n"
        f"üçû **–£–≥–ª–µ–≤–æ–¥—ã**: {counted_statistics.carbohydrates:.1f} –≥\n"
        f"üî• **–ö–∞–ª–æ—Ä–∏–∏**: {counted_statistics.calories:.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown",
    )

@router.message(F.text.lower() == "ai —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
async def generate_user_dish_recommendation(message: types.Message):
    await message.answer(
        f"üçΩ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –±–ª—é–¥–æ**\n"
        f"–ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ö–ë–ñ–£, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –±–ª—é–¥, "
        "—á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É.",
        parse_mode="Markdown"
    )
    user_id = message.from_user.id
    uc: RecommendationUseCase = container.resolve(RecommendationUseCase)
    try:
        recommendation = await uc.generate_recommendation(user_id=user_id)
    except UserNutritionNotSetError:
        await message.answer(
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±–ª—é–¥–∞ AI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è "
             "–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –±–ª—é–¥, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ "
             "–≤–∞—à–µ–π –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ö–ë–ñ–£.\n"
             "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å **–¶–µ–ª—å** –≤ –ø–∞–Ω–µ–ª–∏ –ú–µ–Ω—é",
             parse_mode="Markdown"
        )
        return
    servings_count = recommendation.servings_count
    await message.answer(
        f"**–ë–ª—é–¥–æ**: {recommendation.name}\n\n"
        f"**–°–æ—Å—Ç–∞–≤**:\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {(recommendation.protein / servings_count):.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {(recommendation.fat / servings_count):.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {(recommendation.carbohydrates / servings_count):.1f} –≥\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {(recommendation.calories / servings_count):.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown"
    )
    await message.answer(
        f"üìù **–†–µ—Ü–µ–ø—Ç –Ω–∞ –∫–æ–ª-–≤–æ –±–ª—é–¥: {recommendation.servings_count}**:\n{recommendation.receipt}\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòã",
        parse_mode="Markdown"
    )


@router.message(F.text.lower() == "—Ü–µ–ª—å")
async def handle_goal(message: types.Message):
    user_id = message.from_user.id
    uc: UsersUseCase = container.resolve(UsersUseCase)

    try:
        nutrition = await uc.get_nutrition_goal(user_id=user_id)
        await message.answer(
            f"üìÖ **–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ö–ë–ñ–£**:\n"
            f"ü•© **–ë–µ–ª–∫–∏**: {nutrition.protein:.1f} –≥\n"
            f"üßà **–ñ–∏—Ä—ã**: {nutrition.fat:.1f} –≥\n"
            f"üçû **–£–≥–ª–µ–≤–æ–¥—ã**: {nutrition.carbohydrates:.1f} –≥\n"
            f"üî• **–ö–∞–ª–æ—Ä–∏–∏**: {nutrition.calories:.1f} –∫–∫–∞–ª\n",
            parse_mode="Markdown",
            reply_markup=goal_update_kb,
        )
    except UserNutritionNotSetError:
        await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏. –ó–∞–¥–∞–π—Ç–µ –µ—ë —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            reply_markup=goal_set_kb,
        )


@router.message(F.text.lower() == "–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å")
async def update_nutrition_goal(message: types.Message, state: FSMContext):
    await set_nutrition_goal(message=message, state=state)


@router.message(F.text.lower() == "–∑–∞–¥–∞—Ç—å —Ü–µ–ª—å")
async def set_nutrition_goal(message: types.Message, state: FSMContext):
    await message.answer("–†–æ—Å—Ç (—Å–º):")
    await state.set_state(SetNutritionGoalStates.waiting_height)


@router.message(SetNutritionGoalStates.waiting_height, F.text)
async def process_height(message: types.Message, state: FSMContext):
    await state.update_data(height=message.text)
    await message.answer("–í–µ—Å (–∫–≥):")
    await state.set_state(SetNutritionGoalStates.waiting_weight)


@router.message(SetNutritionGoalStates.waiting_weight, F.text)
async def process_weight(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.answer(f"–í–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(SetNutritionGoalStates.waiting_age)


@router.message(SetNutritionGoalStates.waiting_age, F.text)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª (–º/–∂):")
    await state.set_state(SetNutritionGoalStates.waiting_goal)


@router.message(SetNutritionGoalStates.waiting_goal, F.text)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —Ü–µ–ª–∏:\n{GoalType.get_goal_options()}")
    await state.set_state(SetNutritionGoalStates.waiting_gender)

@router.message(SetNutritionGoalStates.waiting_gender, F.text)
async def process_goal(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    goal_data = await state.get_data()
    uc: UsersUseCase = container.resolve(UsersUseCase)
    goal_data = NutritionGoalSchema(height=float(goal_data["height"]),
                                    weight=float(goal_data["weight"]),
                                    age=int(goal_data["age"]),
                                    is_male=True if goal_data["gender"] == "–º" else False,
                                    nutrition_goal_type=GoalType.from_number(int(message.text.lower())))
    await uc.set_nutrition_goal(user_id=user_id, goal_data=goal_data)
    await message.answer(f"–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=user_kb)
    await state.clear()
