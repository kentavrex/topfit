import asyncio
import logging
from io import BytesIO

import magic
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from bot.keyboards import goal_set_kb, goal_update_kb, statistics_set_kb, unlike_dish_or_back_kb, user_kb
from bot.states import AddMealStates, SetNutritionGoalStates
from bot.validators import GoalValidator
from dependencies import container
from usecases import DishRecognitionUseCase, RecommendationUseCase, StatisticsUseCase, UsersUseCase
from usecases.errors import AudioToTextError, MaxRetryError, UserNutritionNotSetError
from usecases.schemas import ActivityType, GoalType, NutritionGoalSchema

router = Router()


@router.message(F.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    await message.delete()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=user_kb)


@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
async def add_dish(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞!")
    await state.set_state(AddMealStates.waiting_dish_obj)


@router.message(AddMealStates.waiting_dish_obj, F.text)
async def process_dish_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    statistics_uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    dish_recognition_uc: DishRecognitionUseCase = container.resolve(DishRecognitionUseCase)
    try:
        dish_data = await dish_recognition_uc.recognize_dish_from_text(dish_name=message.text)
        await send_dish_info(message, dish_data)
        await statistics_uc.update_statistics(user_id=user_id, dish_id=dish_data.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞={e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


@router.message(AddMealStates.waiting_dish_obj, F.photo)
async def process_dish_image(message: types.Message, state: FSMContext):
    statistics_uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    dish_recognition_uc: DishRecognitionUseCase = container.resolve(DishRecognitionUseCase)

    # await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
    # await state.clear()

    processing_message = await message.answer("‚è≥–ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π..")
    user_id = message.from_user.id
    bot = message.bot

    try:
        file = await bot.get_file(message.photo[-1].file_id)
        file_bytes = await bot.download_file(file.file_path)
        file_bytes = file_bytes.read() if isinstance(file_bytes, BytesIO) else file_bytes

        mime = magic.Magic(mime=True)
        mime_type = mime.from_buffer(file_bytes)
        logging.info(f"mime_type={mime_type}")
        dish_data = await dish_recognition_uc.recognize_dish_from_image(dish_bytes=file_bytes, mime_type=mime_type)

        await send_dish_info(message, dish_data)
        await processing_message.edit_text("‚úÖ –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        await statistics_uc.update_statistics(user_id=user_id, dish_id=dish_data.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞={e}")
        await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


@router.message(AddMealStates.waiting_dish_obj, F.voice)
async def process_dish_audio(message: types.Message, state: FSMContext):
    statistics_uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    dish_recognition_uc: DishRecognitionUseCase = container.resolve(DishRecognitionUseCase)

    processing_message = await message.answer("‚è≥–ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π..")
    user_id = message.from_user.id
    bot = message.bot

    try:
        file = await bot.get_file(message.voice.file_id)
        file_bytes_io = await bot.download_file(file.file_path)
        file_bytes = file_bytes_io.read()  # –ü—Ä–∏–≤–æ–¥–∏–º BytesIO –∫ bytes

        try:
            dish_data = await dish_recognition_uc.recognize_dish_from_audio(file_bytes=file_bytes)
        except AudioToTextError:
            await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await asyncio.sleep(2)
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
            await state.clear()
            return

        await send_dish_info(message, dish_data)
        await processing_message.edit_text("‚úÖ –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        await statistics_uc.update_statistics(user_id=user_id, dish_id=dish_data.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞={e}")
        await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()


async def send_dish_info(message: types.Message, dish_data):
    await message.answer(
        f"üçΩ *–ë–ª—é–¥–æ:* {dish_data.name}\n"
        f"ü•© *–ë–µ–ª–∫–∏:* {dish_data.protein:.1f} –≥\n"
        f"üßà *–ñ–∏—Ä—ã:* {dish_data.fat:.1f} –≥\n"
        f"üçû *–£–≥–ª–µ–≤–æ–¥—ã:* {dish_data.carbohydrates:.1f} –≥\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏:* {dish_data.calories:.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown",
        reply_markup=unlike_dish_or_back_kb,
    )


@router.message(F.text.lower() == "–±–ª—é–¥–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
async def unlike_dish(message: types.Message):
    await message.delete()
    await message.answer(
        "–ú—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –±–ª—é–¥–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!",
        reply_markup=user_kb,
    )


@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def get_daily_statistics(message: types.Message):
    user_id = message.from_user.id
    uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    counted_statistics = await uc.get_daily_statistics(user_id=user_id)
    await message.answer(
        f"üìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**:\n"
        f"ü•© **–ë–µ–ª–∫–∏**: {counted_statistics.protein:.1f} –≥\n"
        f"üßà **–ñ–∏—Ä—ã**: {counted_statistics.fat:.1f} –≥\n"
        f"üçû **–£–≥–ª–µ–≤–æ–¥—ã**: {counted_statistics.carbohydrates:.1f} –≥\n"
        f"üî• **–ö–∞–ª–æ—Ä–∏–∏**: {counted_statistics.calories:.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown",
        reply_markup=statistics_set_kb,
    )


@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
async def get_monthly_statistics(message: types.Message):
    processing_message = await message.answer(
        "‚åõ **–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–∞—á–∞–ª—Å—è..**\n", parse_mode="Markdown"
    )
    user_id = message.from_user.id
    uc: StatisticsUseCase = container.resolve(StatisticsUseCase)
    counted_statistics = await uc.get_monthly_statistics(user_id=user_id)
    month_data = []
    for stat in counted_statistics:
        if stat.calories > 0:
            entry = (
                f"{stat.valid_from_dt.strftime('%d.%m')}: "
                f"{stat.calories:.1f}/"
                f"{stat.protein:.1f}/"
                f"{stat.fat:.1f}/"
                f"{stat.carbohydrates:.1f}"
            )
        else:
            entry = f"{stat.valid_from_dt.strftime('%d.%m')}: -"
        month_data.append(entry)

    text = "üìÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–∞–ª–æ—Ä–∏–∏/–±–µ–ª–∫–∏/–∂–∏—Ä—ã/—É–≥–ª–µ–≤–æ–¥—ã**\n" + "\n".join(month_data)
    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
    await message.answer(text, parse_mode="Markdown", reply_markup=user_kb)


@router.message(F.text.lower() == "ai —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
async def generate_user_dish_recommendation(message: types.Message):
    processing_message = await message.answer(
        "üçΩ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –±–ª—é–¥–æ**\n"
        "–ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ö–ë–ñ–£, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –±–ª—é–¥, "
        "—á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É.",
        parse_mode="Markdown",
    )
    user_id = message.from_user.id
    uc: RecommendationUseCase = container.resolve(RecommendationUseCase)
    try:
        recommendation = await uc.generate_recommendation(user_id=user_id)
    except MaxRetryError:
        await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.")
        return
    except UserNutritionNotSetError:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        await message.answer(
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±–ª—é–¥–∞ AI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è "
            "–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Ü–µ–ª–∏ –ø–æ –ö–ë–ñ–£.\n"
            "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å **–¶–µ–ª—å** –≤ –ø–∞–Ω–µ–ª–∏ –ú–µ–Ω—é",
            parse_mode="Markdown",
        )
        return
    servings_count = recommendation.servings_count
    await message.answer(
        f"**–ë–ª—é–¥–æ**: {recommendation.name}\n\n"
        f"**–°–æ—Å—Ç–∞–≤**:\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {(recommendation.protein / servings_count):.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {(recommendation.fat / servings_count):.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {(recommendation.carbohydrates / servings_count):.1f} –≥\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {(recommendation.calories / servings_count):.1f} –∫–∫–∞–ª\n",
        parse_mode="Markdown",
    )
    await message.answer(
        f"üìù **–†–µ—Ü–µ–ø—Ç –Ω–∞ –∫–æ–ª-–≤–æ –±–ª—é–¥ - {recommendation.servings_count}**:\n{recommendation.receipt}\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòã",
        parse_mode="Markdown",
    )


@router.message(F.text.lower() == "—Ü–µ–ª—å")
async def handle_goal(message: types.Message):
    user_id = message.from_user.id
    uc: UsersUseCase = container.resolve(UsersUseCase)

    try:
        nutrition = await uc.get_nutrition_goal(user_id=user_id)
        await message.answer(
            f"üìÖ **–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ö–ë–ñ–£**:\n"
            f"ü•© **–ë–µ–ª–∫–∏**: {nutrition.protein:.1f} –≥\n"
            f"üßà **–ñ–∏—Ä—ã**: {nutrition.fat:.1f} –≥\n"
            f"üçû **–£–≥–ª–µ–≤–æ–¥—ã**: {nutrition.carbohydrates:.1f} –≥\n"
            f"üî• **–ö–∞–ª–æ—Ä–∏–∏**: {nutrition.calories:.1f} –∫–∫–∞–ª\n",
            parse_mode="Markdown",
            reply_markup=goal_update_kb,
        )
    except UserNutritionNotSetError:
        await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏. –ó–∞–¥–∞–π—Ç–µ –µ—ë —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            reply_markup=goal_set_kb,
        )


@router.message(F.text.lower() == "–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å")
async def update_nutrition_goal(message: types.Message, state: FSMContext):
    await set_nutrition_goal(message=message, state=state)


@router.message(F.text.lower() == "–∑–∞–¥–∞—Ç—å —Ü–µ–ª—å")
async def set_nutrition_goal(message: types.Message, state: FSMContext):
    await message.answer("–†–æ—Å—Ç (—Å–º):")
    await state.set_state(SetNutritionGoalStates.waiting_height)


@router.message(SetNutritionGoalStates.waiting_height, F.text)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = GoalValidator.validate_height(message.text)
        await state.update_data(height=height)
        await message.answer("–í–µ—Å (–∫–≥):")
        await state.set_state(SetNutritionGoalStates.waiting_weight)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SetNutritionGoalStates.waiting_weight, F.text)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = GoalValidator.validate_weight(message.text)
        await state.update_data(weight=weight)
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(SetNutritionGoalStates.waiting_age)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SetNutritionGoalStates.waiting_age, F.text)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = GoalValidator.validate_age(message.text)
        await state.update_data(age=age)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª (–º/–∂):")
        await state.set_state(SetNutritionGoalStates.waiting_gender)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SetNutritionGoalStates.waiting_gender, F.text)
async def process_gender(message: types.Message, state: FSMContext):
    try:
        gender = GoalValidator.validate_gender(message.text)
        await state.update_data(gender=gender)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{ActivityType.get_activity_options()}")
        await state.set_state(SetNutritionGoalStates.waiting_activity)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SetNutritionGoalStates.waiting_activity, F.text)
async def process_activity(message: types.Message, state: FSMContext):
    try:
        activity_number = GoalValidator.validate_activity(message.text)
        await state.update_data(activity_number=activity_number)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —Ü–µ–ª–∏:\n{GoalType.get_goal_options()}")
        await state.set_state(SetNutritionGoalStates.waiting_goal)
    except ValueError as e:
        await message.answer(str(e))


@router.message(SetNutritionGoalStates.waiting_goal, F.text)
async def process_goal(message: types.Message, state: FSMContext):
    try:
        goal_number = GoalValidator.validate_goal(message.text)
        user_id = message.from_user.id
        goal_data = await state.get_data()
        goal_data = NutritionGoalSchema(
            height=float(goal_data["height"]),
            weight=float(goal_data["weight"]),
            age=int(goal_data["age"]),
            is_male=goal_data["gender"],
            activity_type=ActivityType.from_number(goal_data["activity_number"]),
            nutrition_goal_type=GoalType.from_number(goal_number),
        )
        uc: UsersUseCase = container.resolve(UsersUseCase)
        await uc.set_nutrition_goal(user_id=user_id, goal_data=goal_data)
        await message.answer("–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=user_kb)
        await state.clear()
    except ValueError as e:
        await message.answer(str(e))


@router.message()
async def unknown_command(message: types.Message):
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
